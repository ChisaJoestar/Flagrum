@using System.Reflection
@using SQEX.Ebony.Framework.Node
<div class="bg-grey-900 w-96 h-full overflow-auto">
    <div class="px-5 pt-5 flex flex-row">
        <div>
            <span class="material-icons-outlined">search</span>
        </div>
        <div class="flex-grow pl-3">
            <input class="bg-dark border border-dark-700 w-full" type="text" @bind="Search"/>
        </div>
    </div>
    <div class="my-4">
        @foreach (var tree in TypeTree.OrderByDescending(c => c.Children.Count > 0).ThenBy(c => c.Name))
        {
            <TypeTreeComponent TypeTree="tree" Indentation="25"/>
        }
    </div>
</div>

@code
{
    public List<TypeTree> TypeTree { get; set; } = new();
    public List<TypeTree> Nodes { get; set; } = new();

    private string _search;

    private string Search
    {
        get => _search;
        set
        {
            _search = value;
            foreach (var tree in TypeTree)
            {
                if (string.IsNullOrEmpty(value))
                {
                    ClearSearch(tree);
                }
                else
                {
                    SearchTree(tree, value);
                }
            }

            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        var allTypes = Assembly.GetExecutingAssembly()
            .GetTypes()
            .Where(t => t.IsAssignableTo(typeof(GraphNode)) && t != typeof(GraphNode));

        GenerateTypeTree(allTypes);
        StateHasChanged();
    }

    private void ClearSearch(TypeTree tree)
    {
        tree.IsVisible = true;
        tree.IsCollapsed = true;

        foreach (var child in tree.Children)
        {
            ClearSearch(child);
        }
    }

    private bool SearchTree(TypeTree tree, string value)
    {
        if (tree.Children.Count < 1)
        {
            if (tree.Name.ToLower().Contains(value.ToLower().Trim()))
            {
                tree.IsVisible = true;
                return true;
            }
        }
        else
        {
            var shouldShow = false;
            foreach (var child in tree.Children)
            {
                if (SearchTree(child, value))
                {
                    shouldShow = true;
                }
            }

            if (shouldShow)
            {
                tree.IsCollapsed = false;
                tree.IsVisible = true;
                return true;
            }
        }

        tree.IsCollapsed = true;
        tree.IsVisible = false;
        return false;
    }

    private void GenerateTypeTree(IEnumerable<Type> allTypes)
    {
    //var engines = new string[] { "SQEX", "Black", "Luminous", "Ebony", "Crystal", "White" };
    //foreach (var type in allTypes)
    //{
    //    var tokens = type.Namespace.Split('.');
    //    if (engines.Contains(tokens[0]))
    //    {
    //        var currentTree = TypeTree;
    //        foreach (var token in tokens)
    //        {
    //            var match = currentTree.FirstOrDefault(t => t.Name == token);
    //            if (match == null)
    //            {
    //                var newTree = new TypeTree { Name = token };
    //                currentTree.Add(newTree);
    //                currentTree = newTree.Children;
    //            }
    //            else
    //            {
    //                currentTree = match.Children;
    //            }
    //        }

    //        currentTree.Add(new TypeTree { Name = type.Name, Type = type });
    //        Nodes.Add(new TypeTree { Name = type.Name, Type = type });
    //    }
    //}
        foreach (var type in allTypes)
        {
            var tokens = type.Namespace.Split('.');
            if (tokens.Contains("Sequence"))
            {
                var currentTree = TypeTree;
                var start = false;
                foreach (var token in tokens)
                {
                    if (!start)
                    {
                        if (token == "Sequence")
                        {
                            start = true;
                        }

                        continue;
                    }

                    var match = currentTree.FirstOrDefault(t => t.Name == token);
                    if (match == null)
                    {
                        var newTree = new TypeTree {Name = token};
                        currentTree.Add(newTree);
                        currentTree = newTree.Children;
                    }
                    else
                    {
                        currentTree = match.Children;
                    }
                }

                currentTree.Add(new TypeTree {Name = type.Name, Type = type});
                Nodes.Add(new TypeTree {Name = type.Name, Type = type});
            }
        }
    }
}