@using Flagrum.Web.Persistence.Entities
@using Flagrum.Web.Features.AssetExplorer.Data
@using Flagrum.Core.Gfxbin.Gmdl.Components
@using Flagrum.Core.Gfxbin.Serialization
@using Flagrum.Core.Gfxbin.Data
@using Flagrum.Core.Gfxbin.Gmdl
@inject FlagrumDbContext Context

<div class="p-6">
    @if (Model != null)
    {
        foreach (var meshObject in Model.MeshObjects.Where(mo => mo.Meshes.Any(m => m.LodNear == 0)).OrderBy(mo => mo.Name))
        {
            <h4 class="text-grey-300 mb-4">@meshObject.Name</h4>
            @foreach (var mesh in meshObject.Meshes.Where(m => m.LodNear == 0).OrderBy(m => m.Name))
            {
                <div class="box p-4 mb-4">
                    <h6 class="text-grey-300 mb-1">@mesh.Name</h6>
                    @Model.Header.Dependencies.FirstOrDefault(d => d.PathHash == mesh.DefaultMaterialHash.ToString())?.Path
                </div>
            }
        }
    }
</div>

@code
{
    private AssetExplorerItem _previousItem;

    [Parameter]
    public AssetExplorerItem Item { get; set; }

    private Model Model { get; set; }

    protected override void OnParametersSet()
    {
        if (_previousItem == Item)
        {
            return;
        }

        var gfxbin = Item.Data();
        var reader = new BinaryReader(gfxbin);
        var header = new GfxbinHeader();
        header.Read(reader);

        var gpubinUri = header.Dependencies.FirstOrDefault(d => d.Path.EndsWith(".gpubin"))?.Path;
        var gpubin = Context.GetFileByUri(gpubinUri);

        Model = new ModelReader(gfxbin, gpubin).Read();

        StateHasChanged();
    }
}