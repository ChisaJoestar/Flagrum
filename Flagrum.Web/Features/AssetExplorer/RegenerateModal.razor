@using Microsoft.EntityFrameworkCore.Internal
@inject AppStateService AppState
@inject UriMapper Mapper
@inject FlagrumDbContext Context
@inject IStringLocalizer<RegenerateModal> L

<AutosizeModal @ref="Modal" MaxWidth="420px">
    <HeaderView>
        <span class="text-grey-300 flex-grow">@L["Title"]</span>
        <span class="material-icons cursor-pointer" @onclick="() => Modal.Close()">cancel</span>
    </HeaderView>
    <BodyView>
        <div class="h-full">
            <span class="block mb-6">
                @L["Description"]
            </span>
            @if (Context.EarcMods.Any(m => m.IsActive))
            {
                <div class="rounded-md bg-accent1-900 border border-accent1-500 text-accent1-300 p-4 mt-4">
                    @L["ActiveModsWarning"]
                </div>
            }
            else
            {
                <Button Icon="refresh" Text="@L["RegenerateIndex"]" OnClickAsync="OnClick"/>
            }
        </div>
    </BodyView>
</AutosizeModal>

@code
{
    [CascadingParameter]
    public MainLayout MainLayout { get; set; }

    [CascadingParameter]
    public Index Parent { get; set; }

    private AutosizeModal Modal { get; set; }

    public void Open()
    {
        Modal.Open();
    }

    private async Task OnClick()
    {
        AppState.Node = null;
        Parent.ClearSelectedItem();
        MainLayout.CallStateHasChanged();
        Modal.Close();

        await Task.Run(() =>
        {
            Mapper.RegenerateMap();
            Context.GetDependencies().StateManager.ResetState();

            AppState.Node = Context.AssetExplorerNodes
                .FirstOrDefault(n => n.Id == 1);

            InvokeAsync(() => MainLayout.CallStateHasChanged());
        });
    }
}