@using System.Collections
@using System.Reflection
<table class="w-full" style="max-width: 100%">
    @foreach (var property in Object.GetType().GetProperties())
    {
        var isExpandable = !property.PropertyType.IsPrimitive && property.PropertyType != typeof(string);
        var isEnumerable = property.PropertyType.GetInterfaces().Any(i => i == typeof(IEnumerable)) && property.PropertyType != typeof(string);

        object value;
        if (property.PropertyType.GetTypeInfo().IsArray)
        {
            continue;
        }
        else
        {
            value = property.GetValue(Object);
        }
        
        var count = 0;
        if (isEnumerable)
        {
            var iterator = ((IEnumerable)value).GetEnumerator();
            using (iterator as IDisposable)
            {
                while (iterator.MoveNext())
                {
                    count++;
                }
            }
        }
                    
        <tr>
            <td class="pr-2">
                @if (isExpandable)
                {
                    <span class="material-icons text-accent2-900">add_box</span>
                }
            </td>
            <td class="pr-4">
                <strong>@property.Name</strong>
            </td>
            <td>
                @if (isEnumerable)
                {
                    <span>@count items</span>
                }
                else
                {
                    @value?.ToString()
                }
            </td>
        </tr>
        
        @if (isExpandable && IsExpanded)
        {
            if (isEnumerable && !value.GetType().GetTypeInfo().IsArray)
            {
                <tr>
                    <td></td>
                    <td colspan="2">
                        @foreach (var item in (IEnumerable)value)
                        {
                            if (!item.GetType().GetTypeInfo().IsArray)
                            {
                                <ObjectInspector Object="@item" />
                            }
                        }
                    </td>
                </tr>
            }
            else if (value != null && !value.GetType().GetTypeInfo().IsArray)
            {
                <tr>
                    <td></td>
                    <td colspan="2">
                        <ObjectInspector Object="@value"/>
                    </td>
                </tr>
            }
        }
    }
</table>

@code
{
    [Parameter]
    public object Object { get; set; }
    
    private bool IsExpanded { get; set; }
}
