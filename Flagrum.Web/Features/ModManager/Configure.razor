@page "/mod/configure"
@using Flagrum.Archiver
@using Flagrum.Archiver.Binmod
@using Flagrum.Archiver.Binmod.Data
@using Flagrum.Gfxbin.Btex
@using Flagrum.Web.Components.Controls.Data
@using System.IO
@using Flagrum.Core.Utilities

@inject NavigationManager Navigation
@inject JSInterop Interop
@inject Settings Settings
@inject AppStateService AppState

<LoadingView Text="@LoadingText"
             IsLoading="@IsLoading">
    <div class="p-6">

        <div class="box row p-4">
            <span class="flex-grow">@Mod.GameMenuTitle</span>
            <Button Icon="save" Text="Save" OnClick="Save" IsDisabled="!HasModelData"/>
            <Button Icon="cancel" Text="Cancel" CssClass="ml-3" OnClick="Cancel"/>
        </div>

        @if (!HasModelData)
        {
            <div class="box row p-4 mt-6">
                <span class="flex-grow">
                    Select FMD file with your model data
                </span>
                <BrowseButton Icon="folder"
                              Text="Browse"
                              AllowedExtensions=".fmd"
                              OnFileSelected="OnFileSelected"
                              BeforeFileLoaded="@(() => SetLoading("Loading Data"))"/>
            </div>
        }
        else
        {
            <div class="box row p-5 mt-6">
                @if (PreviewBase64 != null)
                {
                    <img style="display:block;width:150px;height:150px;" src="data:image/png;base64, @PreviewBase64"/>
                }
                <div class="flex-grow pl-6">
                    <table>
                        <tr>
                            <td class="pb-1">UUID:</td>
                            <td class="pb-1 pl-3">
                                <strong>@Mod.Uuid</strong>
                            </td>
                        </tr>
                        <tr>
                            <td class="pb-1">Mod Directory:</td>
                            <td class="pb-1 pl-3">
                                <strong>@Mod.ModDirectoryName</strong>
                            </td>
                        </tr>
                        <tr>
                            <td class="pb-1">Last Updated:</td>
                            <td class="pb-1 pl-3">
                                <strong>@(Mod.IsWorkshopMod ? "N/A" : Mod.LastUpdated == default ? "Not on Steam Workshop" : Mod.LastUpdated.ToString("d MMMM yyyy 'at' h:mm tt"))</strong>
                            </td>
                        </tr>
                    </table>
                    <div class="row mt-10">
                        @if (!Mod.IsWorkshopMod)
                        {
                            <BrowseButton Icon="image"
                                          Text="Change Image"
                                          AllowedExtensions=".png"
                                          OnFileSelected="OnImageSelected"/>
                            <BrowseButton Icon="view_in_ar"
                                          Text="Change Model"
                                          AllowedExtensions=".fmd"
                                          BeforeFileLoaded="@(() => SetLoading("Loading Data"))"
                                          OnFileSelected="OnModelSelected"
                                          CssClass="ml-3"/>
                        }
                        
                        @if (!IsNew && !Mod.IsWorkshopMod)
                        {
                            <Button Icon="upload" Text="Upload to Workshop" OnClick="Upload" CssClass="ml-3"/>
                            <Button Icon="delete_forever" Text="Delete" OnClick="Delete" CssClass="ml-3"/>
                        }
                    </div>
                </div>
            </div>

            <div class="box mt-6">
                <EditForm Model="Mod">
                    <div class="p-4">
                        <table class="w-full right-align-all-labels">
                            <tr>
                                <td>
                                    <label>IN-GAME TITLE</label>
                                </td>
                                <td colspan="7" class="pl-4">
                                    <Textbox Size="Textbox.Variant.Stretch" @bind-Value="Mod.GameMenuTitle"/>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>DESCRIPTION</label>
                                </td>
                                <td colspan="7" class="pl-4">
                                    <Textbox Rows="3" Size="Textbox.Variant.Stretch" @bind-Value="Mod.Description"/>
                                </td>
                            </tr>
                            <tr>
                                <td class="py-2">
                                    <label>TARGET</label>
                                </td>
                                <td class="py-2 pl-4" colspan="3">
                                    <EnumSelect @bind-Value="Mod.Target"/>
                                </td>
                                <td class="py-2">
                                    <label>MAX HP</label>
                                </td>
                                <td class="py-2">
                                    <NumberBox @bind-Value="Mod.MaxHp"/>
                                </td>
                                <td class="py-2">
                                    <label>MAX MP</label>
                                </td>
                                <td class="py-2">
                                    <NumberBox @bind-Value="Mod.MaxMp"/>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>STRENGTH</label>
                                </td>
                                <td>
                                    <NumberBox @bind-Value="Mod.Strength"/>
                                </td>
                                <td>
                                    <label>VITALITY</label>
                                </td>
                                <td>
                                    <NumberBox @bind-Value="Mod.Vitality"/>
                                </td>
                                <td>
                                    <label>MAGIC</label>
                                </td>
                                <td>
                                    <NumberBox @bind-Value="Mod.Magic"/>
                                </td>
                                <td>
                                    <label>SPIRIT</label>
                                </td>
                                <td>
                                    <NumberBox @bind-Value="Mod.Spirit"/>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>FIRE RES</label>
                                </td>
                                <td>
                                    <NumberBox @bind-Value="Mod.Fire"/>
                                </td>
                                <td>
                                    <label>ICE RES</label>
                                </td>
                                <td>
                                    <NumberBox @bind-Value="Mod.Ice"/>
                                </td>
                                <td>
                                    <label>THUNDER RES</label>
                                </td>
                                <td>
                                    <NumberBox @bind-Value="Mod.Thunder"/>
                                </td>
                                <td>
                                    <label>DARK RES</label>
                                </td>
                                <td>
                                    <NumberBox @bind-Value="Mod.Dark"/>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <label>BALLISTIC RES</label>
                                </td>
                                <td>
                                    <NumberBox @bind-Value="Mod.Ballistic"/>
                                </td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                            </tr>
                        </table>
                    </div>
                </EditForm>
            </div>
        }
    </div>
</LoadingView>

@code
{
    private Unpacker _unpacker;

    private Binmod Mod { get; set; }
    private string PreviewBase64 { get; set; }
    private bool IsNew { get; set; }
    private bool HasModelData { get; set; }
    private byte[] ModelData { get; set; }
    private bool ImageHasChanged { get; set; }
    private string LoadingText { get; set; }
    private bool IsLoading { get; set; }

    protected override void OnInitialized()
    {
        Mod = AppState.ActiveMod?.Clone();

        if (Mod == null)
        {
            InitializeNewMod();
        }
        else
        {
            InitializeExistingMod();
        }
    }

    private void SetLoading(string text)
    {
        LoadingText = text;
        IsLoading = true;
        StateHasChanged();
    }

    private void InitializeNewMod()
    {
        IsNew = true;

        var previewImage = File.ReadAllBytes($"{IOHelper.GetExecutingDirectory()}\\Binmod\\Resources\\preview.png");
        PreviewBase64 = Convert.ToBase64String(previewImage);

        Mod = new Binmod
        {
            GameMenuTitle = "New Mod",
            Uuid = Guid.NewGuid().ToString(),
            PreviewBytes = previewImage
        };

        Mod.Path = $"{Settings.ModDirectory}\\{Mod.Uuid}.ffxvbinmod";
    }

    private void InitializeExistingMod()
    {
        PreviewBase64 = Convert.ToBase64String(Mod.PreviewBytes);
        HasModelData = true;
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    private void OnFileSelected(InMemoryFile file)
    {
        Mod.ModDirectoryName = file.FileName.ToLower().Split('.')[0].Replace(' ', '_');
        Mod.ModelName = file.FileName.Split('.')[0].Replace(" ", "");

        ModelData = file.Data;
        HasModelData = true;
        IsLoading = false;
        StateHasChanged();
    }

    private void OnImageSelected(InMemoryFile file)
    {
        PreviewBase64 = Convert.ToBase64String(file.Data);
        ImageHasChanged = true;
        StateHasChanged();
    }

    private void OnModelSelected(InMemoryFile file)
    {
        Mod.ModDirectoryName = file.FileName.ToLower().Split('.')[0].Replace(' ', '_');
        Mod.ModelName = file.FileName.Split('.')[0].Replace(" ", "");
        
        ModelData = file.Data;
        StateHasChanged();
    }

    private void Delete()
    {
        SetLoading("Deleting Mod");

        AppState.Mods.Remove(AppState.ActiveMod);
        AppState.UpdateBinmodList();
        File.Delete(Mod.Path);

        Navigation.NavigateTo("/");
    }

    private void Save()
    {
        if (_unpacker != null && ModelData == null)
        {
            SetLoading("Saving");
            var packer = _unpacker.ToPacker();
            packer.UpdateFile("index.modmeta", Mod.ToModmeta());

            if (ImageHasChanged)
            {
                var tempFile = Path.GetTempFileName();
                var tempFile2 = Path.GetTempFileName();
                var png = Convert.FromBase64String(PreviewBase64);
                File.WriteAllBytes(tempFile, png);
                BtexConverter.Convert(tempFile, tempFile2, BtexConverter.TextureType.Color);
                var btex = File.ReadAllBytes(tempFile2);

                packer.UpdateFile("preview.png.bin", png);
                packer.UpdateFile("preview.btex", btex);
                Mod.PreviewBytes = png;
            }

            packer.WriteToFile(Mod.Path);

            AppState.ActiveMod.UpdateFrom(Mod);
            Navigation.NavigateTo("/");
            return;
        }

        SetLoading("Building Mod");
        BuildAsync();
    }

    private async void BuildAsync()
    {
        await Task.Run(() =>
        {
            var builder = new BinmodBuilder(Mod, Convert.FromBase64String(PreviewBase64));
            builder.AddFmd(ModelData);
            builder.WriteToFile(Mod.Path);
            
            Mod.IsApplyToGame = true;

            if (Mod.Index == 0)
            {
                var modList = ModlistEntry.FromFile(Settings.BinmodListPath).ToList();
                Mod.Index = modList.Count > 1 ? modList.Max(m => m.Index) + 1 : 100000;
            }

            if (AppState.ActiveMod == null)
            {
                AppState.Mods.Add(Mod);
            }
            else
            {
                AppState.ActiveMod.UpdateFrom(Mod);
            }
            
            AppState.UpdateBinmodList();
            Navigation.NavigateTo("/");
        });
    }

    private void Upload()
    {
        Navigation.NavigateTo("/mod/upload");
    }
}