@page "/mod/configure"
@using Flagrum.Core.Utilities
@using Flagrum.Web.Features.ModLibrary.Data
@using System.IO
@using Flagrum.Core.Archive
@using Flagrum.Core.Gfxbin.Gmdl

@inject NavigationManager Navigation
@inject JSInterop Interop
@inject Settings Settings
@inject AppStateService AppState
@inject ILogger<Configure> Logger
@inject BinmodTypeHelper BinmodTypeHelper
@inject ModelReplacementPresets ReplacementPresets
@inject BinmodBuilder BinmodBuilder
@inject Modmeta Modmeta
@inject IWpfService WpfService

<CascadingValue Value="this">
    <LoadingView Text="@LoadingText"
                 IsLoading="@IsLoading">
        <div class="p-6">

            <div class="box row p-4">
                <span class="flex-grow">@(IsNew ? "New Mod" : Mod.GameMenuTitle ?? Mod.WorkshopTitle)</span>
                <Button Icon="save" Text="Save" OnClick="Save" IsDisabled="@(!CanSave || StatsTotal > 100)"/>
                <Button Icon="cancel" Text="Cancel" CssClass="ml-3" OnClick="Cancel"/>
            </div>

            @if (!CanSave)
            {
                <div class="row mt-6">
                    <div class="box row p-4 mr-3 flex-grow">
                        <label class="inline-block mr-3">TYPE</label>
                        <IntSelect @bind-Value="Mod.Type" Values="ModTypes" OnChange="ModTypeChanged"/>
                    </div>
                    <div class="box row p-4 ml-3 flex-grow">
                        <label class="inline-block mr-3">TARGET</label>
                        <IntSelect @bind-Value="Mod.Target" Values="ModTargets" OnChange="ModTargetChanged" Placeholder="-- Select Target --"/>
                    </div>
                    @if (Mod.Type == (int)BinmodType.StyleEdit)
                    {
                        <div class="box row p-4 ml-6 flex-grow">
                            <label class="inline-block mr-3">VARIANT</label>
                            <select value="@Mod.Gender"
                                    @onchange="VariantChanged"
                                    class="input bg-dark-550 w-full">
                                <option value="">-- Select Variant --</option>
                                <option value="Female">Female</option>
                                <option value="Male">Male</option>
                            </select>
                        </div>
                    }
                </div>

                @if (Mod.Target > -1 && (Mod.Type != (int)BinmodType.StyleEdit || !string.IsNullOrEmpty(Mod.Gender)))
                {
                    @if (ModelCount == 1)
                    {
                        <div class="box row p-4 mt-6">
                            <span class="flex-grow">
                                Select FMD file with your model data
                            </span>
                            <Button Icon="folder"
                                    Text="Browse"
                                    OnClick="() => SelectModel(0)"/>
                        </div>
                    }
                    else
                    {
                        <div class="box row p-4 mt-6">
                            <span class="flex-grow">
                                @(FmdFileNames[0] == null ? $"Select FMD file for {ModelNames[0]} model" : FmdFileNames[0])
                            </span>
                            <Button Icon="folder"
                                    Text="Browse"
                                    OnClick="() => SelectModel(0)"/>
                        </div>
                        <div class="box row p-4 mt-6">
                            <span class="flex-grow">
                                @(FmdFileNames[1] == null ? $"Select FMD file for {ModelNames[1]} model" : FmdFileNames[1])
                            </span>
                            <Button Icon="folder"
                                    Text="Browse"
                                    OnClick="() => SelectModel(1)"/>
                        </div>
                    }
                }
            }
            else
            {
                <div class="box row p-5 mt-6">
                    @if (Mod.PreviewBytes != null)
                    {
                        <img style="display:block;width:175px;height:175px;" src="images/@(ImageName).png"/>
                    }
                    <div class="flex-grow pl-6">
                        <table>
                            <tr>
                                <td class="pb-1">Mod Type:</td>
                                <td class="pb-1 pl-3">
                                    <strong>@BinmodTypeHelper.GetDisplayName((BinmodType)Mod.Type)</strong>
                                </td>
                            </tr>
                            <tr>
                                <td class="pb-1">Mod Target:</td>
                                <td class="pb-1 pl-3">
                                    <strong>@(BinmodTypeHelper.GetTargets(Mod.Type)[Mod.Target])</strong>
                                </td>
                            </tr>
                            <tr>
                                <td class="pb-1">UUID:</td>
                                <td class="pb-1 pl-3">
                                    <strong>@Mod.Uuid</strong>
                                </td>
                            </tr>
                        </table>
                        <div class="row @(Mod.IsWorkshopMod ? "mt-20" : "mt-14")">
                            @if (!Mod.IsWorkshopMod)
                            {
                                <Button Icon="image"
                                        Text="Change Image"
                                        OnClick="SelectImage"/>
                                @if (Mod.Type == (int)BinmodType.StyleEdit)
                                {
                                    <Button Icon="image"
                                            Text="Change Thumbnail"
                                            OnClick="SelectThumbnail"
                                            CssClass="ml-3"/>
                                }
                                @if (ModelCount == 1)
                                {
                                    <Button Icon="view_in_ar"
                                            Text="Change Model"
                                            OnClick="() => SelectModel(0)"
                                            CssClass="ml-3"/>
                                }
                                else
                                {
                                    <Button Icon="view_in_ar"
                                            Text=@($"Change {ModelNames[0]} Model")
                                            OnClick="() => SelectModel(0)"
                                            CssClass="ml-3"/>
                                    <Button Icon="view_in_ar"
                                            Text=@($"Change {ModelNames[1]} Model")
                                            OnClick="() => SelectModel(1)"
                                            CssClass="ml-3"/>
                                }
                            }

                            @if (!IsNew && !Mod.IsWorkshopMod)
                            {
                                <Button Icon="upload" Text="Upload to Workshop" OnClick="Upload" CssClass="ml-3"/>
                                <Button Icon="delete_forever" Text="Delete" OnClick="Delete" CssClass="ml-3"/>
                            }
                        </div>
                    </div>
                    @if (Mod.ThumbnailBytes != null)
                    {
                        <img style="display:block;width:121px;height:175px;" src="images/@(ThumbnailName).png"/>
                    }
                </div>
                @if (Mod.Type == (int)BinmodType.Cloth)
                {
                    <Outfit/>
                }
                else if (Mod.Type is (int)BinmodType.Weapon or (int)BinmodType.Multi_Weapon)
                {
                    <Weapon/>
                }
                else if (Mod.Type == (int)BinmodType.StyleEdit)
                {
                    <StyleEdit/>
                }
                else
                {
                    <Replacement/>
                }
            }
        </div>
    </LoadingView>
</CascadingValue>

@code
{
    public Binmod Mod { get; set; }
    public int StatsTotal { get; set; }
    private bool IsNew { get; set; }
    private bool CanSave { get; set; }
    private string LoadingText { get; set; }
    private bool IsLoading { get; set; }
    private string ImageName { get; set; } = "current_preview";
    private string ThumbnailName { get; set; } = "current_thumbnail";
    private Dictionary<int, string> ModTypes { get; set; }
    private Dictionary<int, string> ModTargets { get; set; }
    private BuildContext BuildContext { get; set; }
    private int ModelCount { get; set; } = 1;
    private Dictionary<int, string> ModelNames { get; set; }
    private bool[] HasSelectedDataForModel { get; } = new bool[2];
    private string[] FmdFileNames { get; } = new string[2];

    protected override void OnInitialized()
    {
        BuildContext = new BuildContext(Logger, StateHasChanged);
        ModTypes = Enum.GetValues<BinmodType>().ToDictionary(t => (int)t, BinmodTypeHelper.GetDisplayName);

        Mod = AppState.ActiveMod?.Clone();

        if (Mod == null)
        {
            InitializeNewMod();
        }
        else
        {
            InitializeExistingMod();
        }

        ModTargets = BinmodTypeHelper.GetTargets(Mod.Type);
        File.WriteAllBytes($"{IOHelper.GetWebRoot()}\\images\\current_preview.png", Mod.PreviewBytes);

        if (Mod.ThumbnailBytes != null)
        {
            File.WriteAllBytes($"{IOHelper.GetWebRoot()}\\images\\current_thumbnail.png", Mod.ThumbnailBytes);
        }
    }

    private void SetLoading(string text)
    {
        LoadingText = text;
        IsLoading = true;
        StateHasChanged();
    }

    private void InitializeNewMod()
    {
        IsNew = true;
        BuildContext.Flags |= BuildContextFlags.NeedsBuild | BuildContextFlags.PreviewImageChanged;

        var defaultPreviewPath = $"{IOHelper.GetExecutingDirectory()}\\Resources\\preview.png";
        var currentPreviewPath = $"{IOHelper.GetWebRoot()}\\images\\current_preview.png";
        File.Copy(defaultPreviewPath, currentPreviewPath, true);
        var previewBytes = File.ReadAllBytes(defaultPreviewPath);
        BuildContext.ProcessPreviewImage(previewBytes);

        Mod = new Binmod
        {
            Uuid = Guid.NewGuid().ToString(),
            PreviewBytes = previewBytes,
            IsApplyToGame = true
        };

        Mod.Path = $"{Settings.ModDirectory}\\{Mod.Uuid}.ffxvbinmod";
    }

    private void InitializeExistingMod()
    {
        ModelNames = BinmodTypeHelper.GetModelNames(Mod.Type, Mod.Target);
        ModelCount = BinmodTypeHelper.GetModelCount(Mod.Type, Mod.Target);

        if (ModelCount > 1)
        {
            Mod.Model1Name = ModelNames[0].ToSafeString();
            Mod.Model2Name = ModelNames[1].ToSafeString();
        }

        BuildContext.ProcessPreviewImage(Mod.PreviewBytes);
        File.WriteAllBytes($"{IOHelper.GetWebRoot()}\\images\\current_preview.png", Mod.PreviewBytes);

        if (Mod.Type == (int)BinmodType.StyleEdit)
        {
            BuildContext.ProcessThumbnailImage(Mod.ThumbnailBytes);
            File.WriteAllBytes($"{IOHelper.GetWebRoot()}\\images\\current_thumbnail.png", Mod.ThumbnailBytes);
        }

        HasSelectedDataForModel[0] = true;
        HasSelectedDataForModel[1] = true;
        CanSave = true;
        StateHasChanged();
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    private void SelectImage()
    {
        WpfService.OpenFileDialog(
            "Image Files|*.png;*.jpg;*.jpeg;*.tif;*.tiff;*.gif",
            path =>
            {
                BuildContext.ProcessPreviewImage(path, async data =>
                {
                    Mod.PreviewBytes = data;

    // This jank is required or the UI won't update the image if the value hasn't changed
                    ImageName = ImageName == "current_preview" ? "Current_Preview" : "current_preview";
                    await InvokeAsync(StateHasChanged);
                });
            }
            );
    }

    private void SelectThumbnail()
    {
        WpfService.OpenFileDialog(
            "Image Files|*.png;*.jpg;*.jpeg;*.tif;*.tiff;*.gif",
            path =>
            {
                BuildContext.ProcessThumbnailImage(path, async data =>
                {
                    Mod.ThumbnailBytes = data;

    // This jank is required or the UI won't update the image if the value hasn't changed
                    ThumbnailName = ThumbnailName == "current_thumbnail" ? "Current_Thumbnail" : "current_thumbnail";
                    await InvokeAsync(StateHasChanged);
                });
            }
            );
    }

    private void Delete()
    {
        AppState.Mods.Remove(AppState.ActiveMod);
        AppState.UpdateBinmodList();
        File.Delete(Mod.Path);

        Navigation.NavigateTo("/");
    }

    private void Save()
    {
        if (Mod.Type == (int)BinmodType.Character)
        {
            Mod.GameMenuTitle = null;
        }

        File.WriteAllBytes($"{IOHelper.GetWebRoot()}\\images\\{Mod.Uuid}.png", Mod.PreviewBytes);

        if (Mod.Type == (int)BinmodType.StyleEdit)
        {
            File.WriteAllBytes($"{IOHelper.GetWebRoot()}\\images\\{Mod.Uuid}_t.png", Mod.ThumbnailBytes);
        }

        if (BuildContext.Flags.HasFlag(BuildContextFlags.NeedsBuild))
        {
            SetLoading("Building Mod");
            BuildAsync();
        }
        else
        {
            SetLoading("Saving");
            SaveAsync();
        }
    }

    private async void SaveAsync()
    {
        var unpacker = new Unpacker(Mod.Path);
        var packer = unpacker.ToPacker();

        packer.UpdateFile("index.modmeta", Modmeta.Build(Mod));

        if (BuildContext.Flags.HasFlag(BuildContextFlags.PreviewImageChanged))
        {
            await BuildContext.WaitForPreviewData(Mod.Type == (int)BinmodType.StyleEdit);
            packer.UpdateFile("$preview.png", BuildContext.PreviewBtex);
            packer.UpdateFile("$preview.png.bin", BuildContext.PreviewImage);

            if (Mod.Type == (int)BinmodType.StyleEdit)
            {
                packer.UpdateFile("default.png", BuildContext.ThumbnailBtex);
            }
        }

        packer.WriteToFile(Mod.Path);

        AppState.ActiveMod.UpdateFrom(Mod);
        Navigation.NavigateTo("/");
    }

    private async void BuildAsync()
    {
        await BuildContext.WaitForBuildData(Mod.Type == (int)BinmodType.StyleEdit);

        Mod.ModelExtension = "gmdl";
        BinmodBuilder.Initialise(Mod, BuildContext.PreviewImage, BuildContext.PreviewBtex, BuildContext.ThumbnailBtex);

        if (ModelCount > 1)
        {
            if (BuildContext.Fmds[0] == null)
            {
                BinmodBuilder.AddModelFromExisting(Mod, 0);
            }
            else
            {
                BinmodBuilder.AddFmd(0, BuildContext.Fmds[0].Gpubin, BuildContext.Fmds[0].Textures);
            }

            if (BuildContext.Fmds[1] == null)
            {
                BinmodBuilder.AddModelFromExisting(Mod, 1);
            }
            else
            {
                BinmodBuilder.AddFmd(1, BuildContext.Fmds[1].Gpubin, BuildContext.Fmds[1].Textures);
            }
        }
        else
        {
            BinmodBuilder.AddFmd(-1, BuildContext.Fmds[0].Gpubin, BuildContext.Fmds[0].Textures);
        }

        BinmodBuilder.WriteToFile(Mod.Path);

        if (AppState.ActiveMod == null)
        {
            AppState.Mods.Add(Mod);
        }
        else
        {
            AppState.ActiveMod.UpdateFrom(Mod);
        }

        AppState.UpdateBinmodList();
        Navigation.NavigateTo("/");
    }

    private void Upload()
    {
        Navigation.NavigateTo("/mod/upload");
    }

    private void ModTypeChanged(int newType)
    {
        ModTargets = BinmodTypeHelper.GetTargets(newType);
        Mod.Target = -1;
        StateHasChanged();
    }

    private void ModTargetChanged(int newTarget)
    {
        if (Mod.Type == (int)BinmodType.Character)
        {
            Mod.OriginalGmdls = ReplacementPresets.GetOriginalGmdls(newTarget).ToList();
        }

        ModelCount = BinmodTypeHelper.GetModelCount(Mod.Type, newTarget);
        ModelNames = BinmodTypeHelper.GetModelNames(Mod.Type, newTarget);

        if (ModelCount > 1)
        {
            Mod.Model1Name = ModelNames[0].ToSafeString();
            Mod.Model2Name = ModelNames[1].ToSafeString();
        }
    }

    private void VariantChanged(ChangeEventArgs e)
    {
        Mod.Gender = e.Value?.ToString();
    }

    private void SelectModel(int index)
    {
        WpfService.OpenFileDialog(
            "Flagrum Model Data (*.fmd)|*.fmd",
            path =>
            {
                FmdFileNames[index] = path.Split('\\', '/').Last();
                BuildContext.ProcessFmd(index, path);
                Mod.ModDirectoryName = Mod.Uuid;
                Mod.ModelName = path.Split('\\', '/').Last().Split('.')[0].ToSafeString();

                HasSelectedDataForModel[index] = true;

                if (ModelCount == 1)
                {
                    CanSave = true;
                }
                else
                {
                    CanSave = HasSelectedDataForModel[0] && HasSelectedDataForModel[1];
                }

                if (IsNew && Mod.ThumbnailBytes == null && CanSave && Mod.Type == (int)BinmodType.StyleEdit)
                {
                    var defaultThumbnailPath = $"{IOHelper.GetExecutingDirectory()}\\Resources\\default.png";
                    var currentThumbnailPath = $"{IOHelper.GetWebRoot()}\\images\\current_thumbnail.png";
                    File.Copy(defaultThumbnailPath, currentThumbnailPath, true);
                    var thumbnailBytes = File.ReadAllBytes(defaultThumbnailPath);
                    Mod.ThumbnailBytes = thumbnailBytes;
                    BuildContext.ProcessThumbnailImage(thumbnailBytes);
                }
            });
    }
}