@page "/mod/configure"
@using Flagrum.Core.Utilities
@using Flagrum.Web.Components.Controls.Data
@using Flagrum.Web.Features.ModLibrary.Stats
@using Flagrum.Core.Archive.Binmod
@using Flagrum.Core.Gfxbin.Btex
@using System.IO
@using System.IO.Compression
@using System.Text
@using Flagrum.Core.Archive
@using Flagrum.Core.Gfxbin.Gmdl
@using Flagrum.Core.Gfxbin.Gmdl.Constructs
@using Newtonsoft.Json

@inject NavigationManager Navigation
@inject JSInterop Interop
@inject Settings Settings
@inject AppStateService AppState
@inject ILogger<Configure> Logger

<CascadingValue Value="this">
<LoadingView Text="@LoadingText"
             IsLoading="@IsLoading">
<div class="p-6">

<div class="box row p-4">
    <span class="flex-grow">@(Mod.GameMenuTitle == null ? Mod.WorkshopTitle : Mod.GameMenuTitle)</span>
    <Button Icon="save" Text="Save" OnClick="Save" IsDisabled="@(!HasModelData || StatsTotal > 100)"/>
    <Button Icon="cancel" Text="Cancel" CssClass="ml-3" OnClick="Cancel"/>
</div>

@if (!HasModelData)
{
    <div class="box row p-4 mt-6">
        <label>TYPE</label>
        <IntSelect @bind-Value="Mod.Type" Values="ModTypes" OnChange="ModTypeChanged" CssClass="mx-4"/>
        <label>TARGET</label>
        <IntSelect @bind-Value="Mod.Target" Values="ModTargets" OnChange="ModTargetChanged" CssClass="ml-4"/>
    </div>

    @if (Mod.Target > -1)
    {
        @if (BinmodTypeHelper.GetModelCount(Mod.Type, Mod.Target) == 1)
        {
            <div class="box row p-4 mt-6">
                <span class="flex-grow">
                    Select FMD file with your model data
                </span>
                <BrowseButton Icon="folder"
                              Text="Browse"
                              AllowedExtensions=".fmd"
                              OnFileSelected="OnModelSelected"
                              BeforeFileLoaded="@(() => SetLoading("Loading Data"))"/>
            </div>
        }
        else
        {
            <div class="box row p-4 mt-6">
                <span class="flex-grow">
                    @(Model1Data == null ? "Select FMD file for first model" : Mod.Model1Name + ".fmd")
                </span>
                <BrowseButton Icon="folder"
                              Text="Browse"
                              AllowedExtensions=".fmd"
                              OnFileSelected="OnModel1Selected"
                              BeforeFileLoaded="@(() => SetLoading("Loading Data"))"/>
            </div>
            <div class="box row p-4 mt-6">
                <span class="flex-grow">
                    @(Model1Data == null ? "Select FMD file for second model" : Mod.Model2Name + ".fmd")
                </span>
                <BrowseButton Icon="folder"
                              Text="Browse"
                              AllowedExtensions=".fmd"
                              OnFileSelected="OnModel2Selected"
                              BeforeFileLoaded="@(() => SetLoading("Loading Data"))"/>
            </div>
        }
    }
}
else
{
    <div class="box row p-5 mt-4">
        @if (PreviewBase64 != null)
        {
            <img style="display:block;width:175px;height:175px;" src="images/@(ImageName).png"/>
        }
        <div class="flex-grow pl-6">
            <table>
                <tr>
                    <td class="pb-1">Mod Type:</td>
                    <td class="pb-1 pl-3">
                        <strong>@BinmodTypeHelper.GetDisplayName((BinmodType)Mod.Type)</strong>
                    </td>
                </tr>
                <tr>
                    <td class="pb-1">Mod Target:</td>
                    <td class="pb-1 pl-3">
                        <strong>@(BinmodTypeHelper.GetTargets(Mod.Type)[Mod.Target])</strong>
                    </td>
                </tr>
                <tr>
                    <td class="pb-1">UUID:</td>
                    <td class="pb-1 pl-3">
                        <strong>@Mod.Uuid</strong>
                    </td>
                </tr>
                <tr>
                    <td class="pb-1">Last Updated:</td>
                    <td class="pb-1 pl-3">
                        <strong>@(Mod.IsWorkshopMod ? "N/A" : Mod.LastUpdated == default ? "Not on Steam Workshop" : Mod.LastUpdated.ToString("d MMMM yyyy 'at' h:mm tt"))</strong>
                    </td>
                </tr>
            </table>
            <div class="row mt-6">
                @if (!Mod.IsWorkshopMod)
                {
                    <BrowseButton Icon="image"
                                  Text="Change Image"
                                  AllowedExtensions=".png"
                                  OnFileSelected="OnImageSelected"/>
                    <BrowseButton Icon="view_in_ar"
                                  Text="Change Model"
                                  AllowedExtensions=".fmd"
                                  BeforeFileLoaded="@(() => SetLoading("Loading Data"))"
                                  OnFileSelected="OnModelSelected"
                                  CssClass="ml-3"/>
                }

                @if (!IsNew && !Mod.IsWorkshopMod)
                {
                    <Button Icon="upload" Text="Upload to Workshop" OnClick="Upload" CssClass="ml-3"/>
                    <Button Icon="delete_forever" Text="Delete" OnClick="Delete" CssClass="ml-3"/>
                }
            </div>
        </div>
    </div>
    @if (Mod.Type is (int)BinmodType.Cloth or (int)BinmodType.StyleEdit)
    {
        <Outfit />
    }
    else if (Mod.Type is (int)BinmodType.Weapon or (int)BinmodType.Multi_Weapon)
    {
        <Weapon />
    }
    else
    {
        <Replacement />
    }
}
</div>
</LoadingView>
</CascadingValue>

@code
{
    public Binmod Mod { get; set; }
    public int StatsTotal { get; set; }
    private string PreviewBase64 { get; set; }
    private bool IsNew { get; set; }
    private bool HasModelData { get; set; }
    private byte[] ModelData { get; set; }
    private byte[] Model1Data { get; set; }
    private byte[] Model2Data { get; set; }
    private bool ImageHasChanged { get; set; }
    private string LoadingText { get; set; }
    private bool IsLoading { get; set; }
    private string ImageName { get; set; } = "current_preview";
    private Dictionary<int, string> ModTypes { get; set; }
    private Dictionary<int, string> ModTargets { get; set; }

    protected override void OnInitialized()
    {
        ModTypes = Enum.GetValues<BinmodType>().ToDictionary(t => (int)t, t => BinmodTypeHelper.GetDisplayName(t));

        Mod = AppState.ActiveMod?.Clone();

        if (Mod == null)
        {
            InitializeNewMod();
        }
        else
        {
            InitializeExistingMod();
        }

        ModTargets = BinmodTypeHelper.GetTargets(Mod.Type);
        Logger.LogInformation($"Mod type is {Mod.Type}!");

        File.WriteAllBytes($"{IOHelper.GetWebRoot()}\\images\\current_preview.png", Mod.PreviewBytes);
    }

    private void SetLoading(string text)
    {
        LoadingText = text;
        IsLoading = true;
        StateHasChanged();
    }

    private void InitializeNewMod()
    {
        IsNew = true;

        var previewImage = File.ReadAllBytes($"{IOHelper.GetExecutingDirectory()}\\Resources\\preview.png");
        PreviewBase64 = Convert.ToBase64String(previewImage);

        Mod = new Binmod
        {
            GameMenuTitle = "New Mod",
            Uuid = Guid.NewGuid().ToString(),
            PreviewBytes = previewImage,
            IsApplyToGame = true
        };

        Mod.Path = $"{Settings.ModDirectory}\\{Mod.Uuid}.ffxvbinmod";
    }

    private void InitializeExistingMod()
    {
        PreviewBase64 = Convert.ToBase64String(Mod.PreviewBytes);
        HasModelData = true;
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }

    private async void OnImageSelected(InMemoryFile file)
    {
        PreviewBase64 = Convert.ToBase64String(file.Data);
        await File.WriteAllBytesAsync($"{IOHelper.GetWebRoot()}\\images\\current_preview.png", file.Data);
        ImageHasChanged = true;

    // This jank is required or the UI won't update the image if the value hasn't changed
        ImageName = ImageName == "current_preview" ? "Current_Preview" : "current_preview";

    // This appears to call weirdly and so needs InvokeAsync or it won't update either
        await InvokeAsync(StateHasChanged);
    }

    private void OnModelSelected(InMemoryFile file)
    {
        Mod.ModDirectoryName = Mod.Uuid;
        Mod.ModelName = file.FileName.Split('\\', '/').Last().Split('.')[0].ToSafeString();

        ModelData = file.Data;
        HasModelData = true;
        IsLoading = false;
        StateHasChanged();
    }

    private void OnModel1Selected(InMemoryFile file)
    {
        Mod.Model1Name = file.FileName.Split('\\', '/').Last().Split('.')[0].ToSafeString();
        Model1Data = file.Data;
        CheckBothModelsSelected();
    }

    private void OnModel2Selected(InMemoryFile file)
    {
        Mod.Model2Name = file.FileName.Split('\\', '/').Last().Split('.')[0].ToSafeString();
        Model2Data = file.Data;
        CheckBothModelsSelected();
    }

    private void CheckBothModelsSelected()
    {
        if (Model1Data != null && Model2Data != null)
        {
            Mod.ModDirectoryName = Mod.Uuid;
            HasModelData = true;
        }

        IsLoading = false;
        StateHasChanged();
    }

    private void Delete()
    {
        SetLoading("Deleting Mod");

        AppState.Mods.Remove(AppState.ActiveMod);
        AppState.UpdateBinmodList();
        File.Delete(Mod.Path);

        Navigation.NavigateTo("/");
    }

    private void Save()
    {
        File.WriteAllBytes($"{IOHelper.GetWebRoot()}\\images\\{Mod.Uuid}.png", Convert.FromBase64String(PreviewBase64));

        if (ModelData == null)
        {
            SetLoading("Saving");
            SaveAsync();
            return;
        }

        SetLoading("Building Mod");
        BuildAsync();
    }

    private async void SaveAsync()
    {
        await Task.Run(() =>
        {
            var unpacker = new Unpacker(Mod.Path);
            var packer = unpacker.ToPacker();
            packer.UpdateFile("index.modmeta", Modmeta.Build(Mod));

            if (ImageHasChanged)
            {
                var tempFile = Path.GetTempFileName();
                var tempFile2 = Path.GetTempFileName();
                var png = Convert.FromBase64String(PreviewBase64);
                File.WriteAllBytes(tempFile, png);
                BtexConverter.Convert(Settings.BTexConverterPath, tempFile, tempFile2, BtexConverter.TextureType.Color);
                var btex = File.ReadAllBytes(tempFile2);

                packer.UpdateFile("preview.png.bin", png);
                packer.UpdateFile("preview.btex", btex);
                Mod.PreviewBytes = png;
            }

            packer.WriteToFile(Mod.Path);

            AppState.ActiveMod.UpdateFrom(Mod);
            Navigation.NavigateTo("/");
        });
    }

    private async void BuildAsync()
    {
        await Task.Run(() =>
        {
            var builder = new BinmodBuilder(Settings.BTexConverterPath, Mod, Convert.FromBase64String(PreviewBase64));
            builder.AddFmd(Settings.BTexConverterPath, ModelData, Settings.GameDataDirectory);
            builder.WriteToFile(Mod.Path);

            Mod.IsApplyToGame = true;

            if (Mod.Index == 0)
            {
                var modList = ModlistEntry.FromFile(Settings.BinmodListPath).ToList();
                Mod.Index = modList.Count > 1 ? modList.Max(m => m.Index) + 1 : 100000;
            }

            if (AppState.ActiveMod == null)
            {
                AppState.Mods.Add(Mod);
            }
            else
            {
                AppState.ActiveMod.UpdateFrom(Mod);
            }

            AppState.UpdateBinmodList();
            Navigation.NavigateTo("/");
        });
    }

    private void Upload()
    {
        Navigation.NavigateTo("/mod/upload");
    }

    private void ModTypeChanged(int newType)
    {
        ModTargets = BinmodTypeHelper.GetTargets(newType);
        Mod.Target = -1;
        StateHasChanged();
    }

    private void ModTargetChanged(int newTarget)
    {
        if (Mod.Type == (int)BinmodType.Character)
        {
            Mod.OriginalGmdls = ModelReplacementPresets.GetOriginalGmdls(newTarget).ToList();
        }
    }
}