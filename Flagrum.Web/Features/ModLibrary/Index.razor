@page "/"
@using System.Collections.Concurrent
@using System.IO
@using Flagrum.Core.Archive
@using Flagrum.Core.Utilities

@inject NavigationManager Navigation
@inject Settings Settings
@inject AppStateService AppState
@inject ILogger<Index> Logger
@inject BinmodTypeHelper BinmodTypeHelper
@inject JSInterop Interop

<LoadingView Text="Loading Mods"
             IsLoading="IsLoading">

    <div class="pt-6">
        <div class="row mx-7 mb-2">
            <div class="bg-dark-600 shadow-md rounded row mt-1">
                <ModTypeButtonGroup Target="AppState.ActiveCategoryFilter" OnItemSelected="FilterCategory">
                    <ModTypeButton Text="Local Mods" Value="0"/>
                    <ModTypeButton Text="Workshop Mods" Value="1"/>
                    <ModTypeButton Text="All Mods" Value="-1"/>
                </ModTypeButtonGroup>
            </div>
            <div class="bg-dark-600 shadow-md rounded row ml-10 mt-1">
                <ModTypeButtonGroup Target="AppState.ActiveModTypeFilter" OnItemSelected="FilterType">
                    <ModTypeButton Text="All Mods" Value="-1"/>
                    <ModTypeButton Text="Outfits" Value="(int)BinmodType.Cloth"/>
                    <ModTypeButton Text="Weapons" Value="(int)BinmodType.Weapon"/>
                    <ModTypeButton Text="Replacements" Value="(int)BinmodType.Character"/>
                    <ModTypeButton Text="Comrades Styles" Value="(int)BinmodType.StyleEdit"/>
                    <ModTypeButton Text="Comrades Weapons" Value="(int)BinmodType.Multi_Weapon"/>
                </ModTypeButtonGroup>
            </div>
            <div class="flex-grow"></div>
            <Button Icon="add" Text="Create New Mod" OnClick="Create"/>
        </div>
        <CascadingValue Value="this">
            <div class="row flex-wrap px-4 ml-0.5 mb-10">
                <ModListingGroup Mods="AppState.Mods.Where(m => (AppState.ActiveCategoryFilter == -1 || m.IsWorkshopMod == (AppState.ActiveCategoryFilter == 1)) && (AppState.ActiveModTypeFilter == -1 || m.Type == AppState.ActiveModTypeFilter)).OrderByDescending(m => m.IsApplyToGame).ThenBy(m => m.Type).ThenBy(m => m.Target).ThenBy(m => m.GameMenuTitle ?? m.WorkshopTitle)"/>
            </div>
        </CascadingValue>
    </div>

</LoadingView>

@code
{
    [CascadingParameter]
    public MainLayout Parent { get; set; }

    private bool IsLoading { get; set; }

    protected override async void OnInitialized()
    {
        if (!AppState.IsModListInitialized)
        {
            await Task.Run(() =>
            {
                var binmodList = ModlistEntry.FromFile(Settings.BinmodListPath);
                var localMods = Directory.GetFiles(Settings.ModDirectory, "*.ffxvbinmod", SearchOption.TopDirectoryOnly);
                var workshopMods = Directory.GetFiles(Settings.WorkshopDirectory, "*.ffxvbinmod", SearchOption.AllDirectories);
                var allMods = localMods.Union(workshopMods);
                var mods = new ConcurrentBag<Binmod>();

                Parallel.ForEach(allMods, file =>
                {
                    using var unpacker = new Unpacker(file);
                    var modmetaBytes = unpacker.UnpackFileByQuery("index.modmeta", out _);
                    var mod = Binmod.FromModmetaBytes(modmetaBytes, BinmodTypeHelper, Logger);
                    var previewBytes = unpacker.UnpackFileByQuery("$preview.png.bin", out _);
                    var binmodListing = binmodList.FirstOrDefault(e => file.Contains(e.Path.Replace('/', '\\')));

                    if (mod == null)
                    {
                        Logger.LogWarning($"Could not read modmeta from {file}");
                        return;
                    }

                    mod.Description = mod.Description?.Replace("\\n", "\n");
                    mod.GameMenuDescription = mod.GameMenuDescription?.Replace("\\n", "\n");
                    mod.IsWorkshopMod = binmodListing.IsWorkshopMod;
                    mod.Index = binmodListing.Index;
                    mod.IsApplyToGame = binmodListing.IsEnabled;
                    mod.Path = file;
                    mod.PreviewBytes = previewBytes;
                    File.WriteAllBytes($"{IOHelper.GetWebRoot()}\\images\\{mod.Uuid}.png", previewBytes);

                    mods.Add(mod);
                });

                AppState.Mods = mods.ToList();
                var paths = AppState.Mods.Select(m => m.Path);
                AppState.UnmanagedEntries = binmodList.Where(e => !paths.Any(p => p.Contains(e.Path.Replace('/', '\\')))).ToList();
            });

            AppState.IsModListInitialized = true;
        }

        StateHasChanged();
    }

    private void Create()
    {
        AppState.ActiveMod = null;
        Navigation.NavigateTo("/mod/configure");
    }

    private void FilterType(int type)
    {
        AppState.ActiveModTypeFilter = type;
        StateHasChanged();
    }

    private void FilterCategory(int category)
    {
        AppState.ActiveCategoryFilter = category;
        StateHasChanged();
    }
}