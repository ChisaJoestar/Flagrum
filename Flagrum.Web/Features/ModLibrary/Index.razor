@page "/"
@using Flagrum.Core.Archive
@using Flagrum.Core.Utilities
@using System.IO
@using Flagrum.Core.Archive.Binmod

@inject NavigationManager Navigation
@inject Settings Settings
@inject AppStateService AppState
@inject ILogger<Index> Logger

<LoadingView Text="Loading Mods"
             IsLoading="IsLoading">

    <div class="mx-6 mt-6">
        <div class="row">
            <h5 class="font-bold text-grey-300 ml-1 flex-grow">Local Mods</h5>
            <Button Icon="add" Text="Create New Mod" OnClick="Create"/>
        </div>
    </div>

    <div class="row flex-wrap px-4 ml-0.5">
        @foreach (var mod in AppState.Mods.Where(m => !m.IsWorkshopMod))
        {
            <ModListingCard @key="mod.Uuid" Mod="@mod"/>
        }
    </div>

    <div class="mx-6 mt-8">
        <div class="row">
            <h5 class="font-bold text-grey-300 ml-1 flex-grow">Workshop Mods</h5>
        </div>
    </div>

    <div class="row flex-wrap px-4 ml-0.5 mb-8">
        @foreach (var mod in AppState.Mods.Where(m => m.IsWorkshopMod))
        {
            <ModListingCard @key="mod.Uuid" Mod="@mod"/>
        }
    </div>

</LoadingView>

@code
{
    [CascadingParameter]
    public MainLayout Parent { get; set; }

    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (!AppState.IsModListInitialized)
        {
            await Task.Run(() =>
            {
                var binmodList = ModlistEntry.FromFile(Settings.BinmodListPath);

                foreach (var file in Directory.EnumerateFiles(Settings.ModDirectory)
                    .Union(Directory.EnumerateDirectories(Settings.WorkshopDirectory)
                        .SelectMany(Directory.EnumerateFiles)))
                {
                    try
                    {
                        if (file.EndsWith(".ffxvbinmod"))
                        {
                            var unpacker = new Unpacker(file);
                            var modmetaBytes = unpacker.UnpackFileByQuery("index.modmeta");
                            var mod = Binmod.FromModmetaBytes(modmetaBytes);
                            var previewBytes = unpacker.UnpackFileByQuery("$preview.png.bin");

                            if (mod == null)
                            {
                                continue;
                            }

                            var binmodListing = binmodList.FirstOrDefault(e => file.Contains(e.Path.Replace('/', '\\')));

                            if (mod == null || binmodListing == null)
                            {
                                continue;
                            }

                            mod.Description = mod.Description.Replace("\\n", "\n");
                            mod.IsWorkshopMod = file.Contains(Settings.WorkshopDirectory);
                            mod.IsUploaded = binmodListing.IsWorkshopMod;
                            mod.LastUpdated = default;
                            mod.Index = binmodListing.Index;
                            mod.IsApplyToGame = binmodListing.IsEnabled;
                            mod.Path = file;
                            mod.PreviewBytes = previewBytes;
                            File.WriteAllBytes($"{IOHelper.GetWebRoot()}\\images\\{mod.Uuid}.png", previewBytes);

    // TODO: Get tags from a file
                            mod.Tags = new List<string>();
    // TODO: Get visibility from a file
                            mod.Visibility = 0;

                            AppState.Mods.Add(mod);
                        }
                    }
                    catch (Exception e)
                    {
                        Logger.LogError(e, e.Message);
                    }
                }
                
                var paths = AppState.Mods.Select(m => m.Path);
                AppState.UnmanagedEntries = binmodList.Where(e => !paths.Any(p => p.Contains(e.Path.Replace('/', '\\')))).ToList();
            });

            AppState.IsModListInitialized = true;
        }

        IsLoading = false;
    }

    private void Create()
    {
        AppState.ActiveMod = null;
        Navigation.NavigateTo("/mod/configure");
    }
}