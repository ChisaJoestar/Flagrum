@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@using Flagrum.Web.Persistence.Entities
@using Flagrum.Web.Features.EarcMods.Data
@using System.IO
@using System.IO.Compression
@using Flagrum.Core.Utilities
@using System.Text
@inject IWpfService WpfService
@inject FlagrumDbContext Context
@inject NavigationManager Navigation
@inject ILogger<EarcContextMenu> Logger

<ContextMenu Id="earcContextMenu"
             OverrideDefaultCssClass="fixed select-none bg-grey-700 p-0 border-0 shadow-md"
             OverrideDefaultListCssClass="p-0"
             Direction="ContextMenuDirection.Right">
    @if (((EarcMod)context.Data).IsActive)
    {
        <Item OnClick="() => Disable((EarcMod)context.Data)"
              OverrideDefaultCssClass="text-grey-200 text-sm p-3 hover:bg-grey-600 cursor-pointer transition-colors">
            <div class="row">
                <span class="material-icons mr-3" style="font-size: 0.9rem">block</span>
                <span>Disable Mod</span>
            </div>
        </Item>
    }
    else
    {
        <Item OnClick="() => Enable((EarcMod)context.Data)"
              OverrideDefaultCssClass="text-grey-200 text-sm p-3 hover:bg-grey-600 cursor-pointer transition-colors">
            <div class="row">
                <span class="material-icons mr-3" style="font-size: 0.9rem">check</span>
                <span>Enable Mod</span>
            </div>
        </Item>
    }
    <Item OnClick="async () => await Export((EarcMod)context.Data)"
          OverrideDefaultCssClass="text-grey-200 text-sm p-3 hover:bg-grey-600 cursor-pointer transition-colors">
        <div class="row">
            <span class="material-icons mr-3" style="font-size: 0.9rem">open_in_new</span>
            <span>Export Mod Pack</span>
        </div>
    </Item>
</ContextMenu>

@code
{
    [CascadingParameter]
    public Index Parent { get; set; }

    private async Task CheckConflicts(EarcMod mod, Func<Task> onContinue)
    {
        var uris = mod.Earcs
            .SelectMany(e => e.Replacements.Select(r => r.Uri))
            .ToList();

        var conflicts = Context.EarcMods
            .Where(m => m.IsActive
                        && m.Id != mod.Id
                        && m.Earcs.Any(e => e.Replacements
                            .Any(r => uris.Contains(r.Uri))))
            .Select(m => new {m.Id, m.Name})
            .ToList();

        if (conflicts.Any())
        {
            var message = conflicts.Aggregate("The following mod(s) conflict with this one:<br/><br/>",
                (previous, m) => previous + $"<strong>{m.Name}</strong><br/>");
            Parent.Prompt.Title = "Warning";
            Parent.Prompt.Heading = "Conflicts Detected";
            Parent.Prompt.Subtext = message + "<br/>Would you like to disable the above mod(s) now?";
            Parent.Prompt.OnYes = async () =>
            {
                foreach (var mod in conflicts)
                {
                    var match = Context.EarcMods
                        .Include(m => m.Earcs)
                        .ThenInclude(e => e.Replacements)
                        .Where(m => m.Id == mod.Id)
                        .AsNoTracking()
                        .ToList()
                        .FirstOrDefault()!;

                    await match.Disable(Context);
                }

                await onContinue();
            };

            await InvokeAsync(Parent.Prompt.Open);
        }
        else
        {
            await onContinue();
        }
    }

    private async void Enable(EarcMod mod)
    {
        await InvokeAsync(() => Parent.SetLoading(true, "Enabling Mod"));
        await Task.Run(async () => await CheckConflicts(mod,
            async () => { await mod.Enable(Context, Logger); }));

        await InvokeAsync(() => Parent.SetLoading(false));
    }

    private async void Disable(EarcMod mod)
    {
        await InvokeAsync(() => Parent.SetLoading(true, "Disabling Mod"));
        await Task.Run(async () => await mod.Disable(Context));
        await InvokeAsync(() => Parent.SetLoading(false));
    }

    private async Task Export(EarcMod mod)
    {
        var defaultName = mod.Name.ToLower().Replace(" ", "_") + ".zip";
        const string filter = "ZIP Archive|*.zip";
        await WpfService.OpenSaveFileDialogAsync(defaultName, filter, async savePath =>
        {
            await InvokeAsync(() => Parent.SetLoading(true, "Exporting Mod Pack"));

            await Task.Run(() =>
            {
                var earcMod = Context.EarcMods
                    .Include(m => m.Earcs)
                    .ThenInclude(e => e.Replacements)
                    .Where(m => m.Id == mod.Id)
                    .AsNoTracking()
                    .ToList()
                    .FirstOrDefault()!;

                var metadata = new[] {earcMod}
                    .Select(m => new EarcModMetadata
                    {
                        Name = m.Name,
                        Author = m.Author,
                        Description = m.Description,
                        Replacements = m.Earcs.ToDictionary(
                            e => e.EarcRelativePath,
                            e => e.Replacements.Select(r => r.Uri))
                    })
                    .FirstOrDefault()!;

                using var stream = new FileStream(savePath, FileMode.Create);
                using var zip = new ZipArchive(stream, ZipArchiveMode.Create, true);

                foreach (var earc in earcMod.Earcs)
                {
                    foreach (var replacement in earc.Replacements)
                    {
                        var entry = zip.CreateEntry($"{Cryptography.HashFileUri64(replacement.Uri)}.{replacement.ReplacementFilePath[(replacement.ReplacementFilePath.LastIndexOf('.') + 1)..]}", CompressionLevel.Optimal);
                        using var entryStream = entry.Open();
                        entryStream.Write(File.ReadAllBytes(replacement.ReplacementFilePath));
                    }
                }

                var json = JsonConvert.SerializeObject(metadata);
                var jsonEntry = zip.CreateEntry("flagrum.json", CompressionLevel.Optimal);
                using (var jsonStream = jsonEntry.Open())
                {
                    jsonStream.Write(Encoding.UTF8.GetBytes(json));
                }

                var thumbnail = $@"{IOHelper.GetWebRoot()}\EarcMods\{earcMod.Id}.png";
                var thumbnailEntry = zip.CreateEntry("flagrum.png", CompressionLevel.Optimal);
                using var thumbnailStream = thumbnailEntry.Open();
                thumbnailStream.Write(File.ReadAllBytes(thumbnail));
            });

            await InvokeAsync(() => Parent.SetLoading(false));
        });
    }
}