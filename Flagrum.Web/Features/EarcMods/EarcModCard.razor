@using Microsoft.EntityFrameworkCore
@using Newtonsoft.Json
@using Flagrum.Web.Persistence.Entities
@using Flagrum.Web.Features.EarcMods.Data
@using System.IO
@using System.IO.Compression
@using Flagrum.Core.Utilities
@using System.Text
@inject NavigationManager Navigation
@inject FlagrumDbContext Context
@inject IWpfService WpfService
@inject ILogger<EarcModCard> Logger

<div class="bg-grey-800 rounded shadow-lg mx-4 mt-8 cursor-pointer hover:shadow-xl hover:scale-105 transition-transform transition-shadow transform"
     style="width: 326px; height: 372px; @(IsDisabled ? "filter: grayscale(100%);" : "")"
     @onclick="@(() => Navigation.NavigateTo($"/earc/editor/{Mod.Id}"))">
    <div class="relative rounded-t" style="width: 326px; height: 170px; background-repeat: no-repeat; background-size: cover; background-position: center; background-image: url('EarcMods/@(Mod.Id).png')">
        <Checkbox CssStyle="position:absolute;top:5px;right:5px;"
                  IsChecked="@Mod.IsActive"
                  OnChange="ToggleMod"/>
        <div class="absolute bottom-2 left-2 border-2 border-grey-500 text-grey-300 bg-dark-600 opacity-75 inline-block rounded-full hover:bg-grey-900 hover:border-grey-300 hover:text-white cursor-pointer select-none"
             @onclick="Export"
             @onclick:stopPropagation="true"
             style="width: 38px; height: 38px; padding: 5px;">
            <span class="material-icons select-none">file_download</span>
        </div>
    </div>
    <div class="p-4">
        <strong class="block text-grey-200 flex-grow font-display mb-2">@Mod.Name</strong>
        <div class="block text-grey-200 flex-grow mb-2 flex flex-row items-center">
            <span class="material-icons text-grey-200 mr-2">person</span>
            <span class="flex-grow">@Mod.Author</span>
        </div>
        <span class="text-sm">
            @(Mod.Description.Length > 171 ? Mod.Description[..170] + "..." : Mod.Description)
        </span>
    </div>
</div>

@code
{
    private TaskCompletionSource<bool> _taskCompletionSource;
    
    [CascadingParameter]
    public Index Parent { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public EarcMod Mod { get; set; }

    private async Task CheckConflicts(Func<Task> onContinue)
    {
        var uris = Context.EarcMods
            .Where(m => m.Id == Mod.Id)
            .SelectMany(m => m.Earcs.SelectMany(e => e.Replacements.Select(r => r.Uri)))
            .ToList();

        var conflicts = Context.EarcMods
            .Where(m => m.IsActive
                        && m.Id != Mod.Id
                        && m.Earcs.Any(e => e.Replacements
                            .Any(r => uris.Contains(r.Uri))))
            .Select(m => new {m.Id, m.Name})
            .ToList();

        if (conflicts.Any())
        {
            var message = conflicts.Aggregate("The following mod(s) conflict with this one:<br/><br/>",
                (previous, m) => previous + $"<strong>{m.Name}</strong><br/>");
            Parent.Prompt.Title = "Warning";
            Parent.Prompt.Heading = "Conflicts Detected";
            Parent.Prompt.Subtext = message + "<br/>Would you like to disable the above mod(s) now?";
            Parent.Prompt.OnYes = async () =>
            {
                foreach (var mod in conflicts)
                {
                    var match = Context.EarcMods
                        .Include(m => m.Earcs)
                        .ThenInclude(e => e.Replacements)
                        .Where(m => m.Id == mod.Id)
                        .AsNoTracking()
                        .ToList()
                        .FirstOrDefault()!;

                    await match.Disable(Context);
                }

                await onContinue();
                _taskCompletionSource.SetResult(true);
            };
            Parent.Prompt.OnNo = () =>
            {
                _taskCompletionSource.SetResult(false);
            };

            await InvokeAsync(Parent.Prompt.Open);
        }
        else
        {
            await onContinue();
            _taskCompletionSource.SetResult(true);
        }
    }

    private async void ToggleMod(bool newState)
    {
        if (newState)
        {
            await Enable();
        }
        else
        {
            await Disable();
        }
    }

    private async Task Enable()
    {
        await Task.Run(async () =>
        {
            _taskCompletionSource = new TaskCompletionSource<bool>();
            await CheckConflicts(async () =>
            {
                await InvokeAsync(() => Parent.SetLoading(true, "EnablingMod"));
                await Mod.Enable(Context, Logger);
                await InvokeAsync(() => Parent.SetLoading(false));
            });

            var success = await _taskCompletionSource.Task;
            if (!success)
            {
                Mod.IsActive = false;   // Ensures the checkbox doesn't stay checked
                await InvokeAsync(StateHasChanged);
            }
        });
    }

    private async Task Disable()
    {
        await InvokeAsync(() => Parent.SetLoading(true, "DisablingMod"));
        await Task.Run(async () => await Mod.Disable(Context));
        await InvokeAsync(() => Parent.SetLoading(false));
    }

    private async Task Export()
    {
        var defaultName = Mod.Name.ToLower().Replace(" ", "_") + ".zip";
        const string filter = "ZIP Archive|*.zip";
        await WpfService.OpenSaveFileDialogAsync(defaultName, filter, async savePath =>
        {
            await InvokeAsync(() => Parent.SetLoading(true, "ExportingModPack"));

            await Task.Run(() =>
            {
                var earcMod = Context.EarcMods
                    .Include(m => m.Earcs)
                    .ThenInclude(e => e.Replacements)
                    .Where(m => m.Id == Mod.Id)
                    .AsNoTracking()
                    .ToList()
                    .FirstOrDefault()!;

                var metadata = new[] {earcMod}
                    .Select(m => new EarcModMetadata
                    {
                        Version = 1,
                        Name = m.Name,
                        Author = m.Author,
                        Description = m.Description,
                        Changes = m.Earcs.ToDictionary(
                            e => e.EarcRelativePath,
                            e => e.Replacements.Select(r => new EarcModMetadataChange
                            {
                                Type = r.Type,
                                Uri = r.Uri
                            }))
                    })
                    .FirstOrDefault()!;

                using var stream = new FileStream(savePath, FileMode.Create);
                using var zip = new ZipArchive(stream, ZipArchiveMode.Create, true);

                foreach (var earc in earcMod.Earcs)
                {
                    foreach (var replacement in earc.Replacements.Where(r => r.Type != EarcChangeType.Remove))
                    {
                        var entry = zip.CreateEntry($"{Cryptography.HashFileUri64(replacement.Uri)}.{replacement.ReplacementFilePath[(replacement.ReplacementFilePath.LastIndexOf('.') + 1)..]}", CompressionLevel.Optimal);
                        using var entryStream = entry.Open();
                        entryStream.Write(File.ReadAllBytes(replacement.ReplacementFilePath));
                    }
                }

                var json = JsonConvert.SerializeObject(metadata);
                var jsonEntry = zip.CreateEntry("flagrum.json", CompressionLevel.Optimal);
                using (var jsonStream = jsonEntry.Open())
                {
                    jsonStream.Write(Encoding.UTF8.GetBytes(json));
                }

                var thumbnail = $@"{IOHelper.GetWebRoot()}\EarcMods\{earcMod.Id}.png";
                var thumbnailEntry = zip.CreateEntry("flagrum.png", CompressionLevel.Optimal);
                using var thumbnailStream = thumbnailEntry.Open();
                thumbnailStream.Write(File.ReadAllBytes(thumbnail));
            });

            await InvokeAsync(() => Parent.SetLoading(false));
        });
    }
}